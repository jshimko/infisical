{{ if .Values.infisical.enabled }}
{{- $infisicalValues := .Values.infisical }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "infisical.fullname" . }}
  annotations:
    updatedAt: {{ now | date "2006-01-01 MST 15:04:05" | quote }}
    {{- with $infisicalValues.deploymentAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  labels:
    {{- include "infisical.labels" . | nindent 4 }}
spec:
  replicas: {{ $infisicalValues.replicaCount }}
  selector:
    matchLabels:
      {{- include "infisical.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "infisical.matchLabels" . | nindent 8 }}
      annotations:
        updatedAt: {{ now | date "2006-01-01 MST 15:04:05" | quote }}
        {{- with $infisicalValues.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with $infisicalValues.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $infisicalValues.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $infisicalValues.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $infisicalValues.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $infisicalValues.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $infisicalValues.image.imagePullSecrets | nindent 6 }}
      {{- end }}
      {{- if or $infisicalValues.autoGenerateSecrets $infisicalValues.autoDatabaseSchemaMigration }}
      serviceAccountName: {{ include "infisical.serviceAccountName" . }}
      {{- end }}
      initContainers:
      {{- if $infisicalValues.autoGenerateSecrets }}
      - name: ensure-secret-exists
        image: bitnami/kubectl:latest
        command:
        - "/bin/bash"
        - "-c"
        - |
          # Check if secret already exists (to avoid regenerating on restarts)
          if kubectl get secret {{ $infisicalValues.kubeSecretRef }} -n {{ .Release.Namespace }} &>/dev/null; then
            echo "Secret '{{ $infisicalValues.kubeSecretRef }}' already exists in namespace '{{ .Release.Namespace }}'"
            exit 0
          fi

          # Generate secure random values using openssl
          echo "Generating secure random values..."
          AUTH_SECRET=$(openssl rand -base64 32 | base64)
          ENCRYPTION_KEY=$(openssl rand -hex 16 | base64)
          SITE_URL=$(echo "{{ $infisicalValues.siteUrl }}" | base64)

          # Create the secret
          echo "Creating Kubernetes secret: {{ $infisicalValues.kubeSecretRef }}"
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ $infisicalValues.kubeSecretRef }}
            namespace: {{ .Release.Namespace }}
          type: Opaque
          data:
            AUTH_SECRET: ${AUTH_SECRET}
            ENCRYPTION_KEY: ${ENCRYPTION_KEY}
            SITE_URL: ${SITE_URL}
          EOF

          if [ $? -eq 0 ]; then
            echo "Secret '{{ $infisicalValues.kubeSecretRef }}' created in namespace '{{ .Release.Namespace }}'"
          else
            echo "Failed to create secret"
            exit 1
          fi
      {{- end }}
      {{- if $infisicalValues.autoDatabaseSchemaMigration }}
      - name: "migration-init"
        image: "{{ $infisicalValues.databaseSchemaMigrationJob.image.repository }}:{{ $infisicalValues.databaseSchemaMigrationJob.image.tag }}"
        imagePullPolicy: {{ $infisicalValues.databaseSchemaMigrationJob.image.pullPolicy }}
        args:
        - "job"
        - "{{ .Release.Name }}-schema-migration-{{ .Release.Revision }}"
      {{- end }}
      containers:
      - name: {{ template "infisical.name" . }}-{{ $infisicalValues.name }}
        image: "{{ $infisicalValues.image.repository }}:{{ $infisicalValues.image.tag }}"
        imagePullPolicy: {{ $infisicalValues.image.pullPolicy }}
        ports:
        - containerPort: 8080
        env:
        {{- if .Values.postgresql.useExistingPostgresSecret.enabled }}
        - name: DB_CONNECTION_URI
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.useExistingPostgresSecret.existingConnectionStringSecret.name }}
              key: {{ .Values.postgresql.useExistingPostgresSecret.existingConnectionStringSecret.key }}
        {{- end }}
        {{- if .Values.postgresql.enabled }}
        - name: DB_CONNECTION_URI
          value: {{ include "infisical.postgresDBConnectionString" . }}
        {{- end }}
        {{- if .Values.redis.enabled }}
        - name: REDIS_URL
          value: {{ include "infisical.redisConnectionString" . }}
        {{- end }}
        {{- with $infisicalValues.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}

        envFrom:
        - secretRef:
            name: {{ $infisicalValues.kubeSecretRef }}
        {{- with $infisicalValues.envFrom }}
        {{- toYaml . | nindent 8 }}
        {{- end }}

        {{- with $infisicalValues.securityContext }}
        securityContext:
          {{- toYaml . | nindent 12 }}
        {{- end }}

        {{- with $infisicalValues.startupProbe }}
        startupProbe:
          {{- toYaml . | nindent 12 }}
        {{- end }}

        {{- with $infisicalValues.livenessProbe }}
        livenessProbe:
          {{- toYaml . | nindent 12 }}
        {{- end }}

        {{- with $infisicalValues.readinessProbe }}
        readinessProbe:
          {{- toYaml . | nindent 12 }}
        {{- end }}

        {{- with  $infisicalValues.resources }}
        resources: {{- toYaml . | nindent 12 }}
        {{- end }}

        {{- with $infisicalValues.extraVolumeMounts }}
        volumeMounts:
          {{- toYaml . | nindent 10 }}
        {{- end }}

      {{- with $infisicalValues.extraVolumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---

apiVersion: v1
kind: Service
metadata:
  name: {{ include "infisical.fullname" . }}
  labels:
    {{- include "infisical.labels" . | nindent 4 }}
  {{- with $infisicalValues.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ $infisicalValues.service.type }}
  selector:
    {{- include "infisical.matchLabels" . | nindent 8 }}
  ports:
    - protocol: TCP
      port: {{ default 8080 $infisicalValues.service.port }}
      targetPort: 8080
      {{- if eq $infisicalValues.service.type "NodePort" }}
      nodePort: {{ $infisicalValues.service.nodePort }}
      {{- end }}
{{ end }}
